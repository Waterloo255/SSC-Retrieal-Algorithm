// Suspended Sediment Retrieval Algorithm (SSRA)
// ----------------------------------------------------------
// Chris Lee 
// first time-2021_9_18
// lasted time-2021_11_21
// Note: The code is independently developed by the author on the GEE platform 
// if you use it, please contact jinlongli@stu.scu.edu.cn
// https://events.withgoogle.com/google-earth-engine-user-summit-2017/#content
// ----------------------------------------------------------
// ----------------------------------------------------------
//  Temp1 - Landsat data
/****************************************************************************************************************************
 * 
 *                                              function of data collection
 * 
 * **************************************************************************************************************************/
{{{ //preprocess dataset
  var createLandsatCollection=function createLandsatCollection(params) {
    var defaultParams = {
      region: Map.getBounds(true), 
      start: '1982-01-01', 
      end: formatDate(new Date()), 
      mapImage: function (image) { return image }
    }
    params = mergeObjects([defaultParams, params])
    
    var filter = ee.Filter.and(
        ee.Filter.bounds(params.region),
        ee.Filter.date(params.start, params.end),
        ee.Filter.lt('CLOUD_COVER',50)
    )
   
  var bands_list=['blue', 'green', 'red', 'nir', 'swir1', 'swir2', 'pixel_qa',"brightness"]
    var l5 = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')
                .filter(filter)
                .map(maskL457sr)
                .select(
                  ['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'QA_PIXEL',"ST_B6"], 
                  bands_list
                )
                
      
    var l7 = ee.ImageCollection("LANDSAT/LE07/C02/T1_L2")
              .filter(filter)
              .map(maskL457sr)
                .select(
                  ['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'QA_PIXEL',"ST_B6"], 
                  bands_list
                )
              
      
    var l8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
              .filter(filter)
              .map(maskL8sr)
              .select(
                ['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7','QA_PIXEL','ST_B10'], 
                bands_list
              )
            
      
    // return l5.merge(l7).merge(l8).sort('system:time_start')
    return l8.sort('system:time_start')
    
    // Define a function to scale the data and mask unwanted pixels.   .select('SR_B.|NDVI');
    function maskL457sr(image) {
      // Bit 0 - Fill
      // Bit 1 - Dilated Cloud
      // Bit 2 - Unused
      // Bit 3 - Cloud
      // Bit 4 - Cloud Shadow
      var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('111111', 2)).eq(0);
      var saturationMask = image.select('QA_RADSAT').eq(0);
    
      // Apply the scaling factors to the appropriate bands.
      var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
      var thermalBand = image.select('ST_B6').multiply(0.00341802).add(149.0);
    
      // Replace the original bands with the scaled ones and apply the masks.
      return image.addBands(opticalBands, null, true)
          .addBands(thermalBand, null, true)
          .updateMask(qaMask)
          .updateMask(saturationMask);
    }
        
    
    //Landsat8 SR remove cloud
    function maskL8sr(image) {
      // Develop masks for unwanted pixels (fill, cloud, cloud shadow).
      var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('111111', 2)).eq(0);
      var saturationMask = image.select('QA_RADSAT').eq(0);
    
      // Apply the scaling factors to the appropriate bands.
      var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
      var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
    
      // Calculate NDVI.
      // var ndvi = opticalBands.normalizedDifference(['SR_B5', 'SR_B4'])
      //     .rename('NDVI');
    
      // Replace original bands with scaled bands, add NDVI band, and apply masks.
      return image.addBands(opticalBands, null, true)
          .addBands(thermalBands, null, true)
          // .addBands(ndvi)
          .updateMask(qaMask)
          .updateMask(saturationMask);
    }
    

    
    function excludeBand(bandName, image) {
      var bandNames = image.bandNames()
      var bandIndexes = ee.List.sequence(0, bandNames.size().subtract(1))
        .filter(
          ee.Filter.neq('item', bandNames.indexOf(bandName))
        )
      return image.select(bandIndexes)
    }
    
    function formatDate(date) {
      var d = new Date(date),
          month = '' + (d.getMonth() + 1),
          day = '' + d.getDate(),
          year = d.getFullYear()
    
      if (month.length < 2) 
          month = '0' + month
      if (day.length < 2) 
          day = '0' + day
    
      return [year, month, day].join('-')
    }
  
    function mergeObjects(objects) {
      return objects.reduce(function (acc, o) {
        for (var a in o) { acc[a] = o[a] }
        return acc
        }, {})
    }
  } 
}}}
  
// ----------------------------------------------------------
